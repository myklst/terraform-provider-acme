--- submodule/acme_copy/acme/acme_structure.go	2025-07-03 16:51:20.097629597 +0800
+++ submodule/acme/acme/acme_structure.go	2025-07-03 16:51:21.875663908 +0800
@@ -16,6 +16,7 @@
 	"fmt"
 	"time"
 
+	"github.com/cenkalti/backoff/v4"
 	"github.com/go-acme/lego/v4/certcrypto"
 	"github.com/go-acme/lego/v4/certificate"
 	"github.com/go-acme/lego/v4/lego"
@@ -24,6 +25,10 @@
 	"software.sslmate.com/src/go-pkcs12"
 )
 
+const (
+	DefaultMaxElapsedTime = 120 * time.Minute
+)
+
 // acmeUser implements acme.User.
 type acmeUser struct {
 	// The email address for the account.
@@ -87,17 +92,32 @@
 		return nil, nil, fmt.Errorf("error getting user data: %s", err.Error())
 	}
 
-	client, err := lego.NewClient(expandACMEClient_config(d, meta, user))
-	if err != nil {
-		return nil, nil, err
-	}
+	var client *lego.Client
 
-	// Populate user's registration resource if needed
-	if loadReg {
-		user.Registration, err = client.Registration.ResolveAccountByKey()
+	newClient := func() error {
+		client, err = lego.NewClient(expandACMEClient_config(d, meta, user))
 		if err != nil {
-			return nil, nil, err
+			return err
 		}
+
+		// Populate user's registration resource if needed
+		if loadReg {
+			user.Registration, err = client.Registration.ResolveAccountByKey()
+			if err != nil {
+				if isAbleToRetry(err.Error()) {
+					return err
+				} else {
+					return backoff.Permanent(err)
+				}
+			}
+		}
+		return nil
+	}
+	reconnectBackoff := backoff.NewExponentialBackOff()
+	reconnectBackoff.MaxElapsedTime = DefaultMaxElapsedTime
+	err = backoff.Retry(newClient, reconnectBackoff)
+	if err != nil {
+		return nil, nil, err
 	}
 
 	return client, user, nil
