// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: dnsplugin/v1/dnsplugin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DNSProviderService_Configure_FullMethodName = "/dnsplugin.v1.DNSProviderService/Configure"
	DNSProviderService_Present_FullMethodName   = "/dnsplugin.v1.DNSProviderService/Present"
	DNSProviderService_CleanUp_FullMethodName   = "/dnsplugin.v1.DNSProviderService/CleanUp"
	DNSProviderService_Timeout_FullMethodName   = "/dnsplugin.v1.DNSProviderService/Timeout"
)

// DNSProviderServiceClient is the client API for DNSProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DNSProviderServiceClient interface {
	// Configure needs to be called to initialize the provider and set the
	// configuration.
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error)
	// Present presents the DNS challenge TXT records to a DNS provider. This
	// wraps the lego Present call.
	Present(ctx context.Context, in *PresentRequest, opts ...grpc.CallOption) (*PresentResponse, error)
	// Cleanup requests that DNS challenge TXT records be cleaned up. This wraps
	// the lego Cleanup call.
	CleanUp(ctx context.Context, in *CleanUpRequest, opts ...grpc.CallOption) (*CleanUpResponse, error)
	// Timeout returns the provider's underlying timeout values. This wraps the
	// lego Timeout call.
	Timeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error)
}

type dNSProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDNSProviderServiceClient(cc grpc.ClientConnInterface) DNSProviderServiceClient {
	return &dNSProviderServiceClient{cc}
}

func (c *dNSProviderServiceClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, DNSProviderService_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSProviderServiceClient) Present(ctx context.Context, in *PresentRequest, opts ...grpc.CallOption) (*PresentResponse, error) {
	out := new(PresentResponse)
	err := c.cc.Invoke(ctx, DNSProviderService_Present_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSProviderServiceClient) CleanUp(ctx context.Context, in *CleanUpRequest, opts ...grpc.CallOption) (*CleanUpResponse, error) {
	out := new(CleanUpResponse)
	err := c.cc.Invoke(ctx, DNSProviderService_CleanUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNSProviderServiceClient) Timeout(ctx context.Context, in *TimeoutRequest, opts ...grpc.CallOption) (*TimeoutResponse, error) {
	out := new(TimeoutResponse)
	err := c.cc.Invoke(ctx, DNSProviderService_Timeout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNSProviderServiceServer is the server API for DNSProviderService service.
// All implementations must embed UnimplementedDNSProviderServiceServer
// for forward compatibility
type DNSProviderServiceServer interface {
	// Configure needs to be called to initialize the provider and set the
	// configuration.
	Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error)
	// Present presents the DNS challenge TXT records to a DNS provider. This
	// wraps the lego Present call.
	Present(context.Context, *PresentRequest) (*PresentResponse, error)
	// Cleanup requests that DNS challenge TXT records be cleaned up. This wraps
	// the lego Cleanup call.
	CleanUp(context.Context, *CleanUpRequest) (*CleanUpResponse, error)
	// Timeout returns the provider's underlying timeout values. This wraps the
	// lego Timeout call.
	Timeout(context.Context, *TimeoutRequest) (*TimeoutResponse, error)
	mustEmbedUnimplementedDNSProviderServiceServer()
}

// UnimplementedDNSProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDNSProviderServiceServer struct {
}

func (UnimplementedDNSProviderServiceServer) Configure(context.Context, *ConfigureRequest) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedDNSProviderServiceServer) Present(context.Context, *PresentRequest) (*PresentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Present not implemented")
}
func (UnimplementedDNSProviderServiceServer) CleanUp(context.Context, *CleanUpRequest) (*CleanUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanUp not implemented")
}
func (UnimplementedDNSProviderServiceServer) Timeout(context.Context, *TimeoutRequest) (*TimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timeout not implemented")
}
func (UnimplementedDNSProviderServiceServer) mustEmbedUnimplementedDNSProviderServiceServer() {}

// UnsafeDNSProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DNSProviderServiceServer will
// result in compilation errors.
type UnsafeDNSProviderServiceServer interface {
	mustEmbedUnimplementedDNSProviderServiceServer()
}

func RegisterDNSProviderServiceServer(s grpc.ServiceRegistrar, srv DNSProviderServiceServer) {
	s.RegisterService(&DNSProviderService_ServiceDesc, srv)
}

func _DNSProviderService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSProviderServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNSProviderService_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSProviderServiceServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSProviderService_Present_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSProviderServiceServer).Present(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNSProviderService_Present_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSProviderServiceServer).Present(ctx, req.(*PresentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSProviderService_CleanUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSProviderServiceServer).CleanUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNSProviderService_CleanUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSProviderServiceServer).CleanUp(ctx, req.(*CleanUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNSProviderService_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNSProviderServiceServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DNSProviderService_Timeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNSProviderServiceServer).Timeout(ctx, req.(*TimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DNSProviderService_ServiceDesc is the grpc.ServiceDesc for DNSProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DNSProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dnsplugin.v1.DNSProviderService",
	HandlerType: (*DNSProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _DNSProviderService_Configure_Handler,
		},
		{
			MethodName: "Present",
			Handler:    _DNSProviderService_Present_Handler,
		},
		{
			MethodName: "CleanUp",
			Handler:    _DNSProviderService_CleanUp_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _DNSProviderService_Timeout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dnsplugin/v1/dnsplugin.proto",
}
