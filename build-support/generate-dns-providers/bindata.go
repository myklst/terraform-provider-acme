// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/dns-provider-doc-template.tmpl (2.14kB)
// templates/dns-provider-go-template.tmpl (836B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDnsProviderDocTemplateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5d\x6b\xdb\x48\x14\x7d\x9f\x5f\x71\x70\x02\xdb\x1a\x4b\x7e\x37\x74\xc1\x78\x53\x08\x74\x4b\x68\xba\xfb\x62\x4c\x34\x96\xae\xa4\x21\xa3\x19\x31\x33\x72\x6a\x84\xfe\xfb\x72\xe5\x58\x8a\xbc\x8b\x1b\x16\xfa\x64\x4b\x77\xee\xc7\x39\xf7\x9c\x51\x14\x45\xa2\x96\x05\x3d\x05\x15\x34\xad\x30\x6b\xdb\x78\x63\x33\xea\xba\x99\xf0\xcd\x3e\x95\x81\x0a\xeb\x8e\x2b\xcc\xfe\xf8\xfa\x88\x07\x67\x0f\x2a\x23\xe7\x67\x82\x13\x45\xf4\x3b\xbe\x97\x84\xdc\x6a\x6d\x5f\x94\x29\x90\xd9\xb4\xa9\xc8\x04\x19\x94\x35\x50\x1e\xb2\x09\x36\x2a\xc8\x90\x93\x81\x32\xe4\xce\x56\x08\x25\x61\xbd\xf9\xf3\x4e\xd4\xaf\xe5\x7e\xf3\x58\x3f\xdc\x43\xab\xbd\x93\xee\x88\xad\xa6\xc2\xee\x3e\x94\x21\xd4\x7e\xb5\x5c\x16\x36\x92\x69\x45\x71\xa1\x42\xd9\xec\x63\x65\x97\x1c\x5f\x7e\x8c\x81\x47\x5b\x91\xf0\x94\x72\x37\x8f\x4a\x1e\xe1\x28\x27\x87\x60\xc1\x67\x90\x29\x47\x69\xd0\x47\x44\x50\x06\x95\xf5\x01\xa9\xf4\xe4\x17\x3c\x83\x27\x9c\x53\x85\xac\x6b\x7d\xe4\x34\x9e\xed\x3b\x39\x27\x73\xeb\x2a\x9c\x07\x84\xf4\x78\x21\xad\x63\x21\x6e\xd0\xb6\xf1\x57\x59\x51\xd7\x81\x29\xd9\x94\x52\x6b\x32\x05\x0d\xe4\x08\xc1\x9c\x24\x03\x91\x49\x7f\x2e\x1d\xce\x0d\x45\x53\x69\xb0\x27\x34\x9e\x32\x6e\x5d\x93\xeb\x9b\x4e\x4e\x7b\xe4\xd6\x09\x9e\x6a\x9b\x30\x0b\x4f\x29\xb9\xa0\x72\xc5\x8b\x49\x76\x5b\x47\xde\x36\x2e\xa5\x9e\xa1\xe8\x4d\x6c\x87\x73\x08\x2f\x2a\x94\xa2\x6d\x55\x8e\xf8\xaf\x6f\x5f\xba\x6e\x3b\x00\xd8\x7d\x68\xdb\xd3\xbb\x8f\x6d\x4b\xda\x53\xd7\x0d\xb1\xb6\x8d\x40\x26\xeb\xba\x58\x88\x2b\x6d\x56\x88\xe3\xe5\x39\xec\x97\x6f\x42\x71\x95\x09\xf1\xd9\x3a\xa4\xb6\xaa\x35\x05\x82\x32\x8c\xef\x24\x0d\x6b\x50\xda\x17\x86\xdd\x78\x42\x28\x95\x1f\x79\xe1\x81\xfb\x45\x4c\x10\x33\x60\x71\xee\xb4\x80\x27\xc2\xb6\x24\x47\x57\x48\x88\x32\xe3\xa3\x91\xca\xdd\x55\x28\x97\x87\xaf\x22\xbb\x69\xbc\x32\xc5\x45\x8a\x10\x37\x37\xb8\xfb\x21\x19\xae\x10\x49\x92\x94\xa9\x1e\x26\xc6\xec\x72\x7d\x33\xcc\x26\x4f\xad\x00\xe2\x38\x16\x02\xc8\x8c\x7f\x1a\x05\xc3\x01\x8c\xf4\x7c\x9a\x98\x14\xe8\x44\xc7\xcd\x84\xe0\x95\xf1\x96\x37\xd6\xe4\xaa\x68\x5c\xcf\x74\xfc\xe0\xc8\x93\x09\x5d\xc7\xd3\xad\x5d\xd1\xfb\x13\xdf\xd8\x27\x64\x52\x3a\xa9\x75\x74\xb0\x7c\x3d\xe1\xcf\xf2\x24\x15\x4a\x72\xa8\xa5\x67\x9d\x4a\x0f\x32\x07\xe5\xac\xe9\xcb\x1c\xa4\x53\x72\xaf\xd9\x51\xd6\x89\xc1\x6e\xa1\x74\xb6\x29\x5e\x97\x98\xf6\xe3\x24\xd8\x6b\x9b\x3e\xb3\x0f\x43\x49\x62\x9b\x4c\x30\x5e\x93\xf2\x94\xe5\x48\xba\x62\x37\x4c\x39\x96\xfb\x7f\xe6\x88\xc1\x0a\xad\xac\x23\x64\x14\xa4\xd2\xbe\x57\x96\xf8\x85\xca\xea\x01\x5c\x17\xd7\x84\x1a\x21\xee\x0d\x64\x96\x29\xde\xe6\xe2\x62\x3f\x52\x7b\xcb\x4b\xf2\xc1\x3a\xca\x98\x0d\x09\x6d\x53\xa9\x91\x2b\x4d\x8b\xd1\x4a\xb5\x0c\xa5\xf0\x4d\x5d\x6b\x45\x19\xf6\x47\xf4\xff\x8f\xbc\x71\x0e\x0f\x7c\x8e\xde\x7b\xfa\x7c\xff\xe5\x2e\x81\x6f\xf2\x5c\xfd\x88\xf1\x38\xb2\xf2\x2f\x7c\xdc\x8b\x61\x45\x74\x12\xff\x8e\x2f\xad\x13\xab\x6f\x3c\xcf\x1c\xfd\x3c\xf5\x3d\xb6\x3b\xab\xae\xcf\xf6\x51\x6e\x5d\x74\x76\x47\x34\xf0\x23\xda\xd6\x49\xb6\xcf\xed\xf3\x02\xb7\x07\xac\x3e\x5d\x3a\x63\xe3\x28\x23\x13\x94\xd4\xbe\xeb\xc4\x9c\xaf\xec\xdb\x67\xbe\xaf\x23\xb4\xed\xed\x81\xaf\xbe\xe1\x16\xfc\x79\xb5\xf5\xeb\x8a\xa4\x7e\x4f\x31\xf6\xe9\x9d\x39\xfc\x2d\xdd\x5a\x2b\xfe\x24\x75\xdd\x85\x11\x07\x6b\x41\x3a\xc2\x7c\x3e\x7c\x95\x22\x5f\x53\xca\x9c\xcc\xe7\x90\xa7\xe4\x9e\xef\x7e\x8f\x7b\x7b\x20\x91\xbe\x1d\x0c\x07\xa9\x1b\xf2\x2b\xf1\x5f\x10\x2e\x47\x98\xcc\xdd\x17\xef\x4b\x27\x27\x08\xc9\x14\xc3\xf9\x77\x7c\x33\x25\xe1\x9f\x00\x00\x00\xff\xff\x70\x43\x0a\xc4\x5c\x08\x00\x00")

func templatesDnsProviderDocTemplateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDnsProviderDocTemplateTmpl,
		"templates/dns-provider-doc-template.tmpl",
	)
}

func templatesDnsProviderDocTemplateTmpl() (*asset, error) {
	bytes, err := templatesDnsProviderDocTemplateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dns-provider-doc-template.tmpl", size: 2140, mode: os.FileMode(0644), modTime: time.Unix(1617333386, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0x5b, 0xcd, 0xe4, 0x4f, 0x37, 0x50, 0x30, 0xa6, 0x59, 0xd6, 0xf7, 0xdc, 0xe, 0x7e, 0x58, 0x5d, 0x3a, 0x51, 0x2, 0xf0, 0x33, 0x20, 0xee, 0x77, 0x45, 0xa7, 0xff, 0x31, 0xb8, 0x4c, 0xbd}}
	return a, nil
}

var _templatesDnsProviderGoTemplateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x8b\xdb\x30\x10\xc5\xef\xfa\x14\xd3\x10\x68\x02\x59\xf9\xbe\x90\x43\xd8\x64\x7b\x6a\x08\x2c\xe4\x52\x7a\x98\xb5\xc6\x8e\xb0\x32\x12\x92\xec\x12\x8c\xbe\x7b\x91\x13\xbb\xe9\x9f\x94\x3d\xd9\x33\xd2\xbc\xf7\x7b\xf6\x14\x05\x6c\xda\x68\x9f\x6a\x62\xf2\x18\x49\x41\xa5\x0d\x49\xd8\x5a\x60\x1b\x81\x94\x8e\x52\x38\x2c\x1b\xac\x09\x14\x07\x67\xda\x5a\xb3\x10\xfa\xec\xac\x8f\xb0\x10\xb3\xbe\x9f\xcb\x43\x53\x1f\x30\x9e\x52\x2a\xca\x13\x1a\x43\x5c\xd3\x4c\xf4\xfd\x13\x78\xe4\x9a\x40\x1e\xbc\xed\xb4\x22\x1f\x52\xfa\x73\xc0\x8d\x47\x85\xe2\x50\xf4\xbd\xfc\x62\x0f\x4d\x9d\xd2\x75\x9e\x58\xa5\x24\x96\x42\x14\x45\x76\x1f\x75\x5e\xb1\x8c\xd6\x5f\x5e\x5b\x2e\x41\x07\x40\xa8\x5a\x2e\xa3\xb6\x0c\xf1\x84\x11\x4a\x34\x26\x77\x47\xed\xcf\x21\xcf\x97\x96\x43\xf4\x6d\x9e\x04\x64\x05\x9e\x62\xeb\x39\x40\x3c\xd1\x74\x13\x34\x47\xf2\x15\x96\x24\x45\xbc\x38\x7a\x64\x9a\xfd\x16\x4b\x58\x4c\x71\xa7\x88\x2b\x20\xef\xad\x7f\x84\x7c\xc3\xbd\x15\x55\x46\x31\x06\x6c\x35\x50\x74\x68\xb4\x82\xed\xfe\x6d\xe2\x19\xc0\x43\xeb\xf2\xc7\x26\x05\xef\x17\xd8\xbc\x7c\xdd\x4d\xc7\x52\x74\xe8\xff\xe5\xb2\x86\x33\xba\x6f\x21\x7a\xcd\xf5\xf7\x07\x19\xfa\xff\xfc\x21\xf9\x62\x15\xa5\x34\x7b\xfe\x40\xd2\x9b\x90\xae\x40\xee\xb8\x3b\xa2\xdf\x18\x8d\x81\xb2\xd2\x19\xdd\x8e\x3b\xed\x2d\x9f\x89\xe3\x11\xbd\xc6\x77\x43\x47\x34\x2d\x85\xc5\x1d\xe1\xf5\x71\x0f\x34\x6f\x56\x30\xef\xe0\x79\xfd\xb7\x68\x5e\xa0\x66\x60\xcb\x6f\x5d\x4a\xb3\xd5\xdd\xae\xa4\xe5\x5d\xe1\x06\xc6\xac\xf2\x6b\xb1\xe4\x9e\x7e\x6c\xf7\x6f\x63\x8a\xc5\x52\xe8\x6a\xb8\xf5\x69\x0d\xac\x0d\xf4\xe2\xba\x18\xb9\x18\xc6\x45\x12\x63\xcb\xad\x72\x57\xa4\xdf\x0c\xc5\xcf\x00\x00\x00\xff\xff\xfb\x91\x9c\xf9\x44\x03\x00\x00")

func templatesDnsProviderGoTemplateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDnsProviderGoTemplateTmpl,
		"templates/dns-provider-go-template.tmpl",
	)
}

func templatesDnsProviderGoTemplateTmpl() (*asset, error) {
	bytes, err := templatesDnsProviderGoTemplateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dns-provider-go-template.tmpl", size: 836, mode: os.FileMode(0644), modTime: time.Unix(1675544429, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xaa, 0x46, 0x47, 0x53, 0x35, 0x17, 0x78, 0x2a, 0xea, 0x14, 0x20, 0xac, 0xc3, 0xe2, 0x4c, 0x3e, 0xad, 0x57, 0xe1, 0xac, 0xfa, 0x26, 0xa7, 0xa5, 0x5e, 0x5b, 0x28, 0x7a, 0x67, 0x14, 0xb6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dns-provider-doc-template.tmpl": templatesDnsProviderDocTemplateTmpl,
	"templates/dns-provider-go-template.tmpl":  templatesDnsProviderGoTemplateTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"dns-provider-doc-template.tmpl": {templatesDnsProviderDocTemplateTmpl, map[string]*bintree{}},
		"dns-provider-go-template.tmpl": {templatesDnsProviderGoTemplateTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
